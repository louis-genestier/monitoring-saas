name: Deploy apps
on:
  push:
    branches:
      - main

jobs:
  checks:
    runs-on: ubuntu-latest
    outputs:
      changed-apps: ${{ steps.changed-api.outputs.result }}
      changed-worker: ${{ steps.changed-worker.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - uses: pnpm/action-setup@v4
      - name: Install deps
        run: pnpm install
      - name: Changeset
        id: changeset
        run: |
          pnpm turbo run build --filter="{apps/*}[HEAD^1]" --dry-run=json > turbo_output.json
          echo "Turbo output:"
          cat turbo_output.json
      - name: Changed api ?
        id: changed-api
        run: |
          if grep -q '"api"' turbo_output.json; then
            echo "API changes detected"
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "No API changes detected"
            echo "result=false" >> $GITHUB_OUTPUT
          fi
      - name: Changed worker ?
        id: changed-worker
        run: |
          if grep -q '"worker"' turbo_output.json; then
            echo "Worker changes detected"
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "No worker changes detected"
            echo "result=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug Outputs
        run: |
          echo "Changed apps: ${{ steps.changed-api.outputs.result }}"
          echo "Changed worker: ${{ steps.changed-worker.outputs.result }}"

  deploy-worker:
    needs: checks
    runs-on: ubuntu-latest
    if: ${{ needs.checks.outputs.changed-worker == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - name: Install deps
        run: pnpm install
      - name: Check Server Connectivity
        run: |
          if nc -z -w5 ${{ secrets.SERVER_SSH_HOST }} 22; then
            echo "Server is reachable"
          else
            echo "Server is not reachable"
            exit 1
          fi
      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
      - name: Setup SSH known hosts
        env:
          SSH_KNOWN_HOSTS: ${{ secrets.SERVER_KNOWN_HOSTS }}
        run: |
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      - name: Setup SSH tunnel
        env:
          SSH_USER: ${{ secrets.SERVER_SSH_USER }}
          SSH_HOST: ${{ secrets.SERVER_SSH_HOST }}
        run: |
          ssh -vvv -fN -L 5432:localhost:5432 $SSH_USER@$SSH_HOST
          if [ $? -eq 0 ]; then
            echo "SSH tunnel established successfully"
          else
            echo "Failed to establish SSH tunnel"
            exit 1
          fi
      - name: Execute prisma migration & seed
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd packages/prisma-client
          pnpm prisma migrate deploy
          pnpm prisma generate
      - name: Close SSH tunnel
        if: always()
        run: pkill -f "ssh -fN -L 5432:localhost:5432" || true
      - name: Build worker
        run: pnpm --filter=worker build
      - name: Create .env file
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
        run: |
          cd apps/worker
          echo "DATABASE_URL=$DATABASE_URL" > .env
          echo "NODE_ENV=production" >> .env
          echo "RESEND_API_KEY=$RESEND_API_KEY" >> .env
      - name: Prune worker dependencies
        run: |
          cd apps/worker
          rm -rf node_modules
          pnpm install --prod
      - name: Deploy worker
        env:
          SSH_USER: ${{ secrets.SERVER_SSH_USER }}
          SSH_HOST: ${{ secrets.SERVER_SSH_HOST }}
          WORKER_DIR: ~/worker-dealzap
        run: |
          ssh $SSH_USER@$SSH_HOST "mkdir -p $WORKER_DIR"
          scp -pr packages/prisma-client/src/generated/client/libquery_engine-debian-openssl-3.0.x.so.node $SSH_USER@$SSH_HOST:$WORKER_DIR
          scp -pr apps/worker/{dist,node_modules,package.json,.env} $SSH_USER@$SSH_HOST:$WORKER_DIR

  deploy-api:
    needs: checks
    runs-on: ubuntu-latest
    if: ${{ needs.checks.outputs.changed-apps == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
      - name: Install deps
        run: pnpm install
      - name: Check Server Connectivity
        run: |
          if nc -z -w5 ${{ secrets.SERVER_SSH_HOST }} 22; then
            echo "Server is reachable"
          else
            echo "Server is not reachable"
            exit 1
          fi
      - name: Setup SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
      - name: Setup SSH known hosts
        env:
          SSH_KNOWN_HOSTS: ${{ secrets.SERVER_KNOWN_HOSTS }}
        run: |
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
      - name: Setup SSH tunnel
        env:
          SSH_USER: ${{ secrets.SERVER_SSH_USER }}
          SSH_HOST: ${{ secrets.SERVER_SSH_HOST }}
        run: |
          ssh -vvv -fN -L 5432:localhost:5432 $SSH_USER@$SSH_HOST
          if [ $? -eq 0 ]; then
            echo "SSH tunnel established successfully"
          else
            echo "Failed to establish SSH tunnel"
            exit 1
          fi
      - name: Execute prisma migration & seed
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          cd packages/prisma-client
          pnpm prisma migrate deploy
          pnpm prisma generate
          pnpm prisma db seed
      - name: Close SSH tunnel
        if: always()
        run: pkill -f "ssh -fN -L 5432:localhost:5432" || true
      - name: Build api
        run: pnpm --filter=api build
      - name: Create .env file
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          STRIPE_KEY: ${{ secrets.STRIPE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_BASIC_PRICE_ID: ${{ secrets.STRIPE_BASIC_PRICE_ID }}
          STRIPE_STANDARD_PRICE_ID: ${{ secrets.STRIPE_STANDARD_PRICE_ID }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          API_PORT: 3245
        run: |
          cd apps/api
          echo "DATABASE_URL=$DATABASE_URL" > .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=$API_PORT" >> .env
          echo "ADMIN_EMAIL=louis.genestier@protonmail.com" >> .env
          echo "FRONTEND_URL=https://dealzap.fr" >> .env
          echo "STRIPE_KEY=$STRIPE_KEY" >> .env
          echo "STRIPE_WEBHOOK_SECRET=$STRIPE_WEBHOOK_SECRET" >> .env
          echo "STRIPE_BASIC_PRICE_ID=$STRIPE_BASIC_PRICE_ID" >> .env
          echo "STRIPE_STANDARD_PRICE_ID=$STRIPE_STANDARD_PRICE_ID" >> .env
          echo "EMAIL_PROVIDER=resend" >> .env
          echo "RESEND_API_KEY=$RESEND_API_KEY" >> .env
          echo "SENDER_EMAIL=louis@dealzap.fr" >> .env
      - name: Prune api dependencies
        run: |
          cd apps/api
          rm -rf node_modules
          pnpm install --prod
      - name: Deploy api
        env:
          SSH_USER: ${{ secrets.SERVER_SSH_USER }}
          SSH_HOST: ${{ secrets.SERVER_SSH_HOST }}
          API_DIR: ~/api-dealzap
        run: |
          ssh $SSH_USER@$SSH_HOST "mkdir -p $API_DIR"
          scp -pr packages/prisma-client/src/generated/client/libquery_engine-debian-openssl-3.0.x.so.node $SSH_USER@$SSH_HOST:$API_DIR
          scp -pr apps/api/{dist,node_modules,package.json,.env} $SSH_USER@$SSH_HOST:$API_DIR
      - name: Debug and Restart api
        env:
          SSH_USER: ${{ secrets.SERVER_SSH_USER }}
          SSH_HOST: ${{ secrets.SERVER_SSH_HOST }}
          API_DIR: ~/api-dealzap
          NODE_VERSION: 18 # Replace with your actual Node.js version
        run: |
          ssh $SSH_USER@$SSH_HOST "
            echo 'DEBUG: Loading nvm';
            export NVM_DIR=\"\$HOME/.nvm\";
            [ -s \"\$NVM_DIR/nvm.sh\" ] && \. \"\$NVM_DIR/nvm.sh\";
            
            echo 'DEBUG: Switching to Node.js version $NODE_VERSION';
            nvm use $NODE_VERSION;
            
            echo 'DEBUG: Current Node.js version';
            node --version;
            
            echo 'DEBUG: NPM version';
            npm --version;
            
            echo 'DEBUG: PM2 location';
            which pm2;
            
            echo 'DEBUG: Current directory';
            pwd;
            
            cd $API_DIR;
            echo 'DEBUG: API directory content';
            ls -la;
            
            echo 'Attempting to restart PM2 process';
            pm2 restart --update-env dealzap-api;
          "
