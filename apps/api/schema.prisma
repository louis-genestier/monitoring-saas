generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AlertStatus {
  PENDING
  SENT
  FAILED
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  isEmailVerified   Boolean   @default(false)
  verificationToken String?
  emailVerifiedAt   DateTime?
  isAdmin           Boolean   @default(false)

  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  stripeId       String?          @unique
  session        Session[]
  subscription   Subscription?
  TrackedProduct TrackedProduct[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubscriptionId String   @unique
  status               String
  planName             String
  currentPeriodEnd     DateTime
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Website {
  id         String       @id @default(cuid())
  name       String
  apiBaseurl String
  headers    Json?
  parameters String?
  isEnabled  Boolean      @default(true)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  ProductId  ProductId[]
  PricePoint PricePoint[]
}

model Product {
  id             String           @id @default(cuid())
  name           String
  ProductId      ProductId[]
  PricePoint     PricePoint[]
  TrackedProduct TrackedProduct[]
}

model ProductId {
  id         String  @id @default(cuid())
  externalId String
  productId  String
  websiteId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  website    Website @relation(fields: [websiteId], references: [id])

  @@unique([productId, websiteId])
}

model PricePoint {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  price     Float
  timestamp DateTime @default(now())
  websiteId String
  website   Website  @relation(fields: [websiteId], references: [id])
  Alert     Alert[]
}

model AlertProvider {
  id             String           @id @default(cuid())
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TrackedProduct TrackedProduct[]
  Alert          Alert[]
}

model TrackedProduct {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId       String
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  threshold       Float
  alertProviderId String
  alertProvider   AlertProvider @relation(fields: [alertProviderId], references: [id], onDelete: Cascade)
  isEnabled       Boolean       @default(true)
  Alert           Alert[]
}

model Alert {
  id               String         @id @default(cuid())
  trackedProductId String
  trackedProduct   TrackedProduct @relation(fields: [trackedProductId], references: [id], onDelete: Cascade)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  isEnabled        Boolean        @default(true)
  alertProviderId  String
  alertProvider    AlertProvider  @relation(fields: [alertProviderId], references: [id], onDelete: Cascade)
  pricePointId     String
  pricePoint       PricePoint     @relation(fields: [pricePointId], references: [id], onDelete: Cascade)
  status           AlertStatus
}
